<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2019-08-17T11:52:45+03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Maher Malaeb</title><subtitle>&quot;Best Jekyll Theme by a Mile&quot;. **Hydejack** is your presence on the web, featuring a blog, portfolio, and resume.
</subtitle><author><name>Maher Malaeb</name><email>m.n.malaeb@gmail.com</email></author><entry><title type="html">Java 13 - Simply Explained</title><link href="http://localhost:4000/blog/2019-08-13-java-13-simply-explained/" rel="alternate" type="text/html" title="Java 13 - Simply Explained" /><published>2019-08-13T00:00:00+03:00</published><updated>2019-08-13T00:00:00+03:00</updated><id>http://localhost:4000/blog/java-13-simply-explained</id><content type="html" xml:base="http://localhost:4000/blog/2019-08-13-java-13-simply-explained/">&lt;p&gt;Coders, who they are, and what they do changed a lot through out their short history which effectively started in the late 50’s. This history is explained by Clive Thompson in his book “Coders”. He split the changes into “four waves of coders” as he calls it. Those waves shaped the coders to who they are today.&lt;/p&gt;

&lt;h2 id=&quot;text-blocks&quot;&gt;Text Blocks&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;This feature is still a preview feature in JDK 13 so it is not recommended to use it in production. It might have breaking changes in the future.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before java 13, multi-line string in source code was not straightforward to write or read.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Before Java 13&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;html&amp;gt;\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&quot;    &amp;lt;body&amp;gt;\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&quot;        &amp;lt;p&amp;gt;Hello, world&amp;lt;/p&amp;gt;\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&quot;    &amp;lt;/body&amp;gt;\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;/html&amp;gt;\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Java 13 introduced the triple quote notation &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&quot;&lt;/code&gt; . This will allow us to defined strings on multiple line without the need to escape new lines &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt; or use the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; sign for string concatenation on multiple lines. So the same HTML above becomes much more simpler to read&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Starting Java 13&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
              &amp;lt;html&amp;gt;
                  &amp;lt;body&amp;gt;
                      &amp;lt;p&amp;gt;Hello, world&amp;lt;/p&amp;gt;
                  &amp;lt;/body&amp;gt;
              &amp;lt;/html&amp;gt;
              &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This change allows us to interchangeably copy-paste code between files and java source code.&lt;/p&gt;

&lt;p&gt;The new text block is treated like any other string at runtime. To be able to transform a text block to a standard String, the compiler has to perform a translation procedure as follows:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Unify line endings:&lt;/strong&gt; The output of the string should be the same regardless if the code is running on Linux or Windows environment&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Trim white spaces:&lt;/strong&gt; The indentation in all the lines is removed using the method explained in the JEP-355 “ by counting the number of leading white space characters on each line and taking the minimum count”. Those white spaces are called “incidental white space”&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Translate escape sequences:&lt;/strong&gt; special characters that are usually escaped in Strings such as double quotes do not need to be escaped when used in Text Blocks. The translation happens automatically&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// No need to escape double quotes in the JSON below&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
       {
         &quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;John&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,
         &quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:30,
         &quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;: {
           &quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ford&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,
           &quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car2&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BMW&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,
           &quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car3&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Fiat&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;
         }
       } 
       &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;string-api-changes-related-to-textblocks&quot;&gt;String API changes related to Text Blocks&lt;/h3&gt;
&lt;p&gt;Some new methods were added to the String API that work hand in hand with the Text Block feature.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://download.java.net/java/early_access/jdk13/docs/api/java.base/java/lang/String.html#stripIndent()&quot;&gt;&lt;strong&gt;stripIndent()&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This method does what the step 2 of the Text Block Transformation algorithm do. It removes unnecessary indentation from strings (incidental white space) keeping the relative indentation only. For example, consider the below String.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\t&amp;lt;html&amp;gt;\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&quot;\t\t&amp;lt;body&amp;gt;\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&quot;\t\t\t&amp;lt;p&amp;gt;Hello, world&amp;lt;/p&amp;gt;\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&quot;\t\t&amp;lt;/body&amp;gt;\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&quot;\t&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If we call the &lt;code class=&quot;highlighter-rouge&quot;&gt;stripIndent()&lt;/code&gt; on the string above, the first tab &lt;code class=&quot;highlighter-rouge&quot;&gt;\t&lt;/code&gt; will be removed from the beginning of the &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; string and the resulting string will be:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;html&amp;gt;\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&quot;\t&amp;lt;body&amp;gt;\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&quot;\t\t&amp;lt;p&amp;gt;Hello, world&amp;lt;/p&amp;gt;\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&quot;\t&amp;lt;/body&amp;gt;\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://download.java.net/java/early_access/jdk13/docs/api/java.base/java/lang/String.html#translateEscapes()&quot;&gt;&lt;strong&gt;translateEscapes()&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Transforms a string that includes some escape characters to string literals. This is useful if, for example, you are reading a text file with string content containing escape characters.
consider a text file with the following content.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\&quot;Hello\n\World\&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If we read this file into a string and we print it we get the exact same content of that file. But if we use the new &lt;code class=&quot;highlighter-rouge&quot;&gt;translateEscapes()&lt;/code&gt; the special characters will be escaped and the string will be&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;Hello    World&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://download.java.net/java/early_access/jdk13/docs/api/java.base/java/lang/String.html#formatted(java.lang.Object...)&quot;&gt;&lt;strong&gt;formatted(…)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A convenience method that does what String.format() do but in a non-static manner.
The below are equivalent&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello %s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;Hello %s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;formatted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Those methods are marked as deprecated because they might change in future releases if the Text Blocks feature changes. The deprecation will be removed once the Text Blocks feature is no longer in Preview Mode.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;switch-expressions-updated&quot;&gt;Switch Expressions Updated&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;This feature is still a &lt;a href=&quot;https://openjdk.java.net/jeps/12&quot;&gt;preview feature&lt;/a&gt; in JDK 13 so it is not recommended to use it in production. It might have breaking changes in the future.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Switch Expressions were introduced in Java 12 as a preview feature and are still a preview feature in Java 13. A switch expression is a compact version of the traditional switch statements and can be assigned to a variable directly.&lt;/p&gt;

&lt;p&gt;The result of a switch statement is directly returned as shown below&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayOfWeek&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Monday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Tuesday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Unknown&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;but when using multi-line statements for a certain case, a new keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; was introduced with Java 13 to indicate the return value of the switch expression&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayOfWeek&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Monday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Tuesday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Unknown&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In java 12, the keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; did not exist and &lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt; was used instead but it was dropped because it proved to be misleading&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Copy a bulk of bytes from a byte array into a specific index of the ByteBuffer.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;ByteBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;ByteBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Copy a bulk of bytes from a specific index of the ByteBuffer into byte array&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;ByteBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;ByteBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;security-apichanges&quot;&gt;Security API changes&lt;/h2&gt;
&lt;p&gt;The package &lt;code class=&quot;highlighter-rouge&quot;&gt;javax.security.cert&lt;/code&gt; was removed and the classes inside this package were moved to the package &lt;code class=&quot;highlighter-rouge&quot;&gt;java.security.cert&lt;/code&gt;.
This is a breaking change but it is easy to fix the code base by only removing the &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; from the package name&lt;/p&gt;

&lt;h2 id=&quot;platform-changes&quot;&gt;Platform changes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Re-implementation of the Socket API: The new API is more maintainable, performant and better handles concurrency. If you want to stick to the old implementation you can pass the flag -Djdk.net.usePlainSocketImpl (not recommended) to the jvm arguments&lt;/li&gt;
  &lt;li&gt;Removal of the -Xverify:none and -noverify : Those flags allowed to skip byte code checks when starting the JVM to improve its performance. But they introduced security issues. To enhance the startup performance of the JVM it is recommended to use the Class Data Sharing feature of Java which was also enhanced in Java 13&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ve been through major changes that happened with Java 13, but the list is by no means extensive or the explanation of each feature complete. The purpose of the article is to get you up-to-date with the new release of Java without getting lost into the details.&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://app.pluralsight.com/library/courses/whats-new-in-java-13/table-of-contents&quot;&gt;What’s New in Java 13 by Sander Mak&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://openjdk.java.net/jeps/355&quot;&gt;JEP 355: Text Blocks (Preview)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://openjdk.java.net/jeps/354&quot;&gt;JEP 354: Switch Expressions (Preview)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://download.java.net/java/early_access/jdk13/docs/api/&quot;&gt;Java® Platform, Standard Edition &amp;amp; Java Development Kit Version 13 API Specification&lt;/a&gt;&lt;/p&gt;</content><author><name>Maher Malaeb</name><email>m.n.malaeb@gmail.com</email></author><summary type="html">Coders, who they are, and what they do changed a lot through out their short history which effectively started in the late 50’s. This history is explained by Clive Thompson in his book “Coders”. He split the changes into “four waves of coders” as he calls it. Those waves shaped the coders to who they are today. Text Blocks This feature is still a preview feature in JDK 13 so it is not recommended to use it in production. It might have breaking changes in the future. Before java 13, multi-line string in source code was not straightforward to write or read. // Before Java 13 String html = &quot;&amp;lt;html&amp;gt;\n&quot; + &quot; &amp;lt;body&amp;gt;\n&quot; + &quot; &amp;lt;p&amp;gt;Hello, world&amp;lt;/p&amp;gt;\n&quot; + &quot; &amp;lt;/body&amp;gt;\n&quot; + &quot;&amp;lt;/html&amp;gt;\n&quot;; Java 13 introduced the triple quote notation &quot;&quot;&quot; . This will allow us to defined strings on multiple line without the need to escape new lines \n or use the + sign for string concatenation on multiple lines. So the same HTML above becomes much more simpler to read // Starting Java 13 String html = &quot;&quot;&quot; &amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;Hello, world&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &quot;&quot;&quot;; This change allows us to interchangeably copy-paste code between files and java source code. The new text block is treated like any other string at runtime. To be able to transform a text block to a standard String, the compiler has to perform a translation procedure as follows: Unify line endings: The output of the string should be the same regardless if the code is running on Linux or Windows environment Trim white spaces: The indentation in all the lines is removed using the method explained in the JEP-355 “ by counting the number of leading white space characters on each line and taking the minimum count”. Those white spaces are called “incidental white space” Translate escape sequences: special characters that are usually escaped in Strings such as double quotes do not need to be escaped when used in Text Blocks. The translation happens automatically // No need to escape double quotes in the JSON below String textBlock = &quot;&quot;&quot; { &quot;name&quot;:&quot;John&quot;, &quot;age&quot;:30, &quot;cars&quot;: { &quot;car1&quot;:&quot;Ford&quot;, &quot;car2&quot;:&quot;BMW&quot;, &quot;car3&quot;:&quot;Fiat&quot; } } &quot;&quot;&quot;; String API changes related to Text Blocks Some new methods were added to the String API that work hand in hand with the Text Block feature. stripIndent() This method does what the step 2 of the Text Block Transformation algorithm do. It removes unnecessary indentation from strings (incidental white space) keeping the relative indentation only. For example, consider the below String. String html = &quot;\t&amp;lt;html&amp;gt;\n&quot; + &quot;\t\t&amp;lt;body&amp;gt;\n&quot; + &quot;\t\t\t&amp;lt;p&amp;gt;Hello, world&amp;lt;/p&amp;gt;\n&quot; + &quot;\t\t&amp;lt;/body&amp;gt;\n&quot; + &quot;\t&amp;lt;/html&amp;gt;&quot;; If we call the stripIndent() on the string above, the first tab \t will be removed from the beginning of the html string and the resulting string will be: String html = &quot;&amp;lt;html&amp;gt;\n&quot; + &quot;\t&amp;lt;body&amp;gt;\n&quot; + &quot;\t\t&amp;lt;p&amp;gt;Hello, world&amp;lt;/p&amp;gt;\n&quot; + &quot;\t&amp;lt;/body&amp;gt;\n&quot; + &quot;&amp;lt;/html&amp;gt;&quot;; translateEscapes() Transforms a string that includes some escape characters to string literals. This is useful if, for example, you are reading a text file with string content containing escape characters. consider a text file with the following content. \&quot;Hello\n\World\&quot; If we read this file into a string and we print it we get the exact same content of that file. But if we use the new translateEscapes() the special characters will be escaped and the string will be &quot;Hello World&quot; formatted(…) A convenience method that does what String.format() do but in a non-static manner. The below are equivalent String.format(&quot;Hello %s&quot;, &quot;world&quot;) &quot;Hello %s&quot;.formatted(&quot;world&quot;) Those methods are marked as deprecated because they might change in future releases if the Text Blocks feature changes. The deprecation will be removed once the Text Blocks feature is no longer in Preview Mode. Switch Expressions Updated This feature is still a preview feature in JDK 13 so it is not recommended to use it in production. It might have breaking changes in the future. Switch Expressions were introduced in Java 12 as a preview feature and are still a preview feature in Java 13. A switch expression is a compact version of the traditional switch statements and can be assigned to a variable directly. The result of a switch statement is directly returned as shown below String dayOfWeek = switch(1){ case 1 -&amp;gt; &quot;Monday&quot;; case 2 -&amp;gt; &quot;Tuesday&quot;; ... default -&amp;gt; &quot;Unknown&quot;; }; but when using multi-line statements for a certain case, a new keyword yield was introduced with Java 13 to indicate the return value of the switch expression String dayOfWeek = switch(1){ case 1 -&amp;gt; { String day = &quot;Monday&quot;; yield day; } case 2 -&amp;gt; { String day = &quot;Tuesday&quot;; yield day; } ... default -&amp;gt; &quot;Unknown&quot;; }; In java 12, the keyword yield did not exist and break was used instead but it was dropped because it proved to be misleading Copy a bulk of bytes from a byte array into a specific index of the ByteBuffer. ByteBuffer put​(int index, byte[] src) ByteBuffer put​(int index, byte[] src, int offset, int length) Copy a bulk of bytes from a specific index of the ByteBuffer into byte array ByteBuffer get​(int index, byte[] dst) ByteBuffer get​(int index, byte[] dst, int offset, int length) Security API changes The package javax.security.cert was removed and the classes inside this package were moved to the package java.security.cert. This is a breaking change but it is easy to fix the code base by only removing the x from the package name Platform changes Re-implementation of the Socket API: The new API is more maintainable, performant and better handles concurrency. If you want to stick to the old implementation you can pass the flag -Djdk.net.usePlainSocketImpl (not recommended) to the jvm arguments Removal of the -Xverify:none and -noverify : Those flags allowed to skip byte code checks when starting the JVM to improve its performance. But they introduced security issues. To enhance the startup performance of the JVM it is recommended to use the Class Data Sharing feature of Java which was also enhanced in Java 13 We’ve been through major changes that happened with Java 13, but the list is by no means extensive or the explanation of each feature complete. The purpose of the article is to get you up-to-date with the new release of Java without getting lost into the details. Resources What’s New in Java 13 by Sander Mak JEP 355: Text Blocks (Preview) JEP 354: Switch Expressions (Preview) Java® Platform, Standard Edition &amp;amp; Java Development Kit Version 13 API Specification</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/jdk-13.jpg" /></entry><entry><title type="html">A Brief History of ”Coders”</title><link href="http://localhost:4000/blog/2019-08-04-brief-hisotry-of-coders/" rel="alternate" type="text/html" title="A Brief History of &quot;Coders&quot;" /><published>2019-08-04T00:00:00+03:00</published><updated>2019-08-04T00:00:00+03:00</updated><id>http://localhost:4000/blog/brief-hisotry-of-coders</id><content type="html" xml:base="http://localhost:4000/blog/2019-08-04-brief-hisotry-of-coders/">&lt;p&gt;Coders, who they are, and what they do changed a lot through out their short history which effectively started in the late 50’s. This history is explained by Clive Thompson in his book “Coders”. He split the changes into “four waves of coders” as he calls it. Those waves shaped the coders to who they are today.&lt;/p&gt;

&lt;h2 id=&quot;wave-one-taming-thebeasts&quot;&gt;Wave One: Taming The Beasts&lt;/h2&gt;
&lt;p&gt;The first generation of coders emerged in the late 50’s and early 60’s. Back then computers were huge power hungry machines. You could only find one in university computer labs. Computers didn’t have a mouse or keyboard to interact with. Coders wrote programs on paper using low level language which are very hard to understand. The paper programs were then put in a queue to be handled by special personnel that punched them into cards. Computers only understood punch cards. You had to wait many hours to get the result of you program. If you made a mistake, a bug escaped, you need to go through the whole process again. Coding required so much patience.&lt;/p&gt;

&lt;p&gt;The invention of the transistor drastically changed the rules of the game and opened the door to create smaller computers that could be used by scientist who didn’t know coding. So the challenge of the time was to build an operating system that allowed those scientists to use the computers. Although coding had its challenge, in that era it was still regarded with a lower status when compared to hardware engineers. Coding jobs were mostly held by women.&lt;/p&gt;

&lt;h2 id=&quot;wave-two-nightowls&quot;&gt;Wave Two: Night Owls&lt;/h2&gt;
&lt;p&gt;In the 60’s and early 70’s computers in universities such as MIT were used during the day by researchers for their studies. But during nights, the machines sat idle. So they attracted a new type of coders. Those coders came curious to learn what those machines can do and got hooked. They started tinkering with them. This opened the door for the creative usage of computers. They began using those computers to develop visual interfaces for simple games and to make music among other usages. It was the phase that introduced art into coding. It was also those coders who initiated the hacker culture. The culture of sharing code among other coders for free. The culture that accepted code regardless of whom it is coming from, be it kids, college dropouts or whoever. Code was code and that what mattered. Unfortunately, those coders were mostly boys and hacking computers overnights in computer labs creating an unwelcoming atmosphere for interested women. So this generation of coders were the first to start pushing women away from the coding field.&lt;/p&gt;

&lt;h2 id=&quot;wave-three-gettingpersonal&quot;&gt;Wave Three: Getting Personal&lt;/h2&gt;
&lt;p&gt;Personal Computers started to become a reality in the late 70’s but mainly in the 80’s. A middle-class family could afford to get their teenage child a computer of that time. Those personal computers became popular among teenagers because it allowed them to write their own video games and remake some of their famous arcade games. This was particularly appealing to boys which pushed girls even more away from this field. The dominance of personal computers was combined with the popularizing of the BASIC programming language. The English-like language was relatively easy to understand and came with sample programs and games that allowed those teenage boys to code their own versions of games and their own programs in their parents basements. Coding at that time was not thought of as a career or profession. Learning was done out of curiosity and for fun. The fact that everyone now have the possibility to code created a need for sharing that code to be customized and modified by other coders and re-shared again over the basic networks of the time. This was the first generation open source model.
But in the early 90’s the availability of the more advanced networks which are closer to the internet as we know it today, changed the rules of the game on how coding was done. Before the internet, programs were shipped mostly physically using floppy disks. An escaped bug was so costly to correct and took a lot of time for the fix to reach the user. Programs were carefully designed, developed and then tested in a long traditional process which was called the waterfall approach. However the internet allowed changes to the code of a program to be instantly reflected to the users. Coders now can publish a basic version of their product to the users. The users will effectively be testers of this product that will report the bugs they will see which will be resolved in a much shorter time and released over the internet. This paradigm is what is known as the agile way of building software.&lt;/p&gt;

&lt;h2 id=&quot;wave-four-take-over-theworld&quot;&gt;Wave Four: Take Over The World&lt;/h2&gt;
&lt;p&gt;The web era we are living in today started to take over in the mid 90’s. With it, coding started to get more mainstream. The Netscape browser of the 90’s introduced the “view source” feature which allowed users to view the HTML code of any webpage and edit it to their likes. So code was available for everyone. The web also allowed the emerging of products such as social networks which billions of people used. Scaling introduced 2 extremely different types of problems. A technical problem of how to scale a product to be used by the whole world, in all time zones with relatively zero down time. Coders became increasingly interested not only on how to develop a program, but how to allow billions of users to use it at the same time. Those are two separate technical concerns.
The second problem is a social one. A problem which is extremely outside the area of expertise of coders. The usage of such programs at scale and psychological tricks the coders implemented in their products to get users hooked proved to impact the psychology of users sometimes in destructive ways. Abusive behavior, hate speech and some other forms of social and psychological problems emerged. Coders didn’t always have the knowledge and the incentives to deal with such consequences. What mattered was scaling up which meant more success, more control and eventually more money. When software products became at that scale, and software engineering as a career was well formulated, it started attracting a genre of new graduates that were interested in the field for the sake of power and money. Those same people who used to go to Wall Street before, found in the coding industry a new opportunity to reach their goals, especially after the 2008 financial crisis and the damaged it brought to Wall Street.&lt;/p&gt;

&lt;p&gt;If you liked this article, then you will definitely like the book “Coders: The Making of a New Tribe and the Remaking of the World” by Clive Thompson.&lt;/p&gt;</content><author><name>Maher Malaeb</name><email>m.n.malaeb@gmail.com</email></author><summary type="html">Coders, who they are, and what they do changed a lot through out their short history which effectively started in the late 50’s. This history is explained by Clive Thompson in his book “Coders”. He split the changes into “four waves of coders” as he calls it. Those waves shaped the coders to who they are today. Wave One: Taming The Beasts The first generation of coders emerged in the late 50’s and early 60’s. Back then computers were huge power hungry machines. You could only find one in university computer labs. Computers didn’t have a mouse or keyboard to interact with. Coders wrote programs on paper using low level language which are very hard to understand. The paper programs were then put in a queue to be handled by special personnel that punched them into cards. Computers only understood punch cards. You had to wait many hours to get the result of you program. If you made a mistake, a bug escaped, you need to go through the whole process again. Coding required so much patience. The invention of the transistor drastically changed the rules of the game and opened the door to create smaller computers that could be used by scientist who didn’t know coding. So the challenge of the time was to build an operating system that allowed those scientists to use the computers. Although coding had its challenge, in that era it was still regarded with a lower status when compared to hardware engineers. Coding jobs were mostly held by women. Wave Two: Night Owls In the 60’s and early 70’s computers in universities such as MIT were used during the day by researchers for their studies. But during nights, the machines sat idle. So they attracted a new type of coders. Those coders came curious to learn what those machines can do and got hooked. They started tinkering with them. This opened the door for the creative usage of computers. They began using those computers to develop visual interfaces for simple games and to make music among other usages. It was the phase that introduced art into coding. It was also those coders who initiated the hacker culture. The culture of sharing code among other coders for free. The culture that accepted code regardless of whom it is coming from, be it kids, college dropouts or whoever. Code was code and that what mattered. Unfortunately, those coders were mostly boys and hacking computers overnights in computer labs creating an unwelcoming atmosphere for interested women. So this generation of coders were the first to start pushing women away from the coding field. Wave Three: Getting Personal Personal Computers started to become a reality in the late 70’s but mainly in the 80’s. A middle-class family could afford to get their teenage child a computer of that time. Those personal computers became popular among teenagers because it allowed them to write their own video games and remake some of their famous arcade games. This was particularly appealing to boys which pushed girls even more away from this field. The dominance of personal computers was combined with the popularizing of the BASIC programming language. The English-like language was relatively easy to understand and came with sample programs and games that allowed those teenage boys to code their own versions of games and their own programs in their parents basements. Coding at that time was not thought of as a career or profession. Learning was done out of curiosity and for fun. The fact that everyone now have the possibility to code created a need for sharing that code to be customized and modified by other coders and re-shared again over the basic networks of the time. This was the first generation open source model. But in the early 90’s the availability of the more advanced networks which are closer to the internet as we know it today, changed the rules of the game on how coding was done. Before the internet, programs were shipped mostly physically using floppy disks. An escaped bug was so costly to correct and took a lot of time for the fix to reach the user. Programs were carefully designed, developed and then tested in a long traditional process which was called the waterfall approach. However the internet allowed changes to the code of a program to be instantly reflected to the users. Coders now can publish a basic version of their product to the users. The users will effectively be testers of this product that will report the bugs they will see which will be resolved in a much shorter time and released over the internet. This paradigm is what is known as the agile way of building software. Wave Four: Take Over The World The web era we are living in today started to take over in the mid 90’s. With it, coding started to get more mainstream. The Netscape browser of the 90’s introduced the “view source” feature which allowed users to view the HTML code of any webpage and edit it to their likes. So code was available for everyone. The web also allowed the emerging of products such as social networks which billions of people used. Scaling introduced 2 extremely different types of problems. A technical problem of how to scale a product to be used by the whole world, in all time zones with relatively zero down time. Coders became increasingly interested not only on how to develop a program, but how to allow billions of users to use it at the same time. Those are two separate technical concerns. The second problem is a social one. A problem which is extremely outside the area of expertise of coders. The usage of such programs at scale and psychological tricks the coders implemented in their products to get users hooked proved to impact the psychology of users sometimes in destructive ways. Abusive behavior, hate speech and some other forms of social and psychological problems emerged. Coders didn’t always have the knowledge and the incentives to deal with such consequences. What mattered was scaling up which meant more success, more control and eventually more money. When software products became at that scale, and software engineering as a career was well formulated, it started attracting a genre of new graduates that were interested in the field for the sake of power and money. Those same people who used to go to Wall Street before, found in the coding industry a new opportunity to reach their goals, especially after the 2008 financial crisis and the damaged it brought to Wall Street. If you liked this article, then you will definitely like the book “Coders: The Making of a New Tribe and the Remaking of the World” by Clive Thompson.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/brief_history_of_coders-min.jpg" /></entry></feed>